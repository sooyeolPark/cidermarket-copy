<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="RecordMapper">

    <!-- Beans의 멤버변수(property) 이름과 대상 테이블의 컬럼(column)을 연결한다. -->
    <resultMap type="study.shop.cidermarket.model.Record" id="recordMap">
        <result property="recono" column="recono" />
        <result property="prodno" column="prodno" />
        <result property="buyer" column="buyer" />
        <result property="nickname" column="nickname" />
        <result property="tradecon" column="tradecon" />
        <result property="refund" column="refund" />
        <result property="how" column="how" />
        <result property="confirmdate" column="confirmdate" />
        <result property="name" column="name" />
        <result property="tel" column="tel" />
        <result property="address" column="address" />
        <result property="pay" column="pay" />
        <result property="filepath" column="filepath" />
        <result property="subject" column="subject" />
        <result property="price" column="price" />
        <result property="seller" column="seller" />
        <result property="revino" column="revino" />
        <result property="membno" column="membno" />
    </resultMap>
    
    <!-- 특정회원의 거래 완료 수를 위한 기능 정의 -->
    <select id="selectCount"
        parameterType="study.shop.cidermarket.model.Record"
        resultType="int">
		select (select count(recono) from record r inner join product p on r.prodno=p.prodno
		WHERE r.tradecon = 'W' AND p.seller=#{buyer} AND DATE_FORMAT(confirmdate, '%m')=date_format(now(), '%m'))+
		(select  count(recono) from record r inner join product p on r.prodno=p.prodno
		WHERE r.tradecon = 'W' AND p.seller=#{buyer} AND DATE_FORMAT(confirmdate, '%m')=date_format(date_add(now(), interval -1 MONTH), '%m'))+
		(select  count(recono) from record r inner join product p on r.prodno=p.prodno
		WHERE r.tradecon = 'W' AND p.seller=#{buyer} AND DATE_FORMAT(confirmdate, '%m')=date_format(date_add(now(), interval -2 MONTH), '%m'))+
		(select count(recono) from record WHERE tradecon = 'W' AND buyer=#{buyer} AND DATE_FORMAT(confirmdate, '%m')=date_format(now(), '%m'))+
		(select count(recono) from record WHERE tradecon = 'W' AND buyer=#{buyer}  AND DATE_FORMAT(confirmdate, '%m')=date_format(date_add(now(), interval -1 MONTH), '%m'))+
		(select count(recono) from record WHERE tradecon = 'W' AND buyer=#{buyer}  AND DATE_FORMAT(confirmdate, '%m')=date_format(date_add(now(), interval -2 MONTH), '%m'))
    </select>

    <!-- 필요한부분                             -->
    <select id="selectSellEndCountByMonth"
        parameterType="study.shop.cidermarket.model.Record"
        resultMap="recordMap">
		select (select count(recono) from record r inner join product p on r.prodno=p.prodno
		WHERE r.tradecon = 'W' AND p.seller=#{seller} AND DATE_FORMAT(confirmdate, '%m')=date_format(now(), '%m')) as month,
		(select  count(recono) from record r inner join product p on r.prodno=p.prodno
		WHERE r.tradecon = 'W' AND p.seller=#{seller} AND DATE_FORMAT(confirmdate, '%m')=date_format(date_add(now(), interval -1 MONTH), '%m')) as lastmonth,
		(select  count(recono) from record r inner join product p on r.prodno=p.prodno
		WHERE r.tradecon = 'W' AND p.seller=#{seller} AND DATE_FORMAT(confirmdate, '%m')=date_format(date_add(now(), interval -2 MONTH), '%m')) as lasttwomonth
    </select>


    <select id="selectBuyEndCountByMonth"
        parameterType="study.shop.cidermarket.model.Record"
        resultMap="recordMap">
		select (select count(recono) from record WHERE tradecon = 'W' AND buyer=#{buyer} AND DATE_FORMAT(confirmdate, '%m')=date_format(now(), '%m')) as month,
		(select count(recono) from record WHERE tradecon = 'W' AND buyer=#{buyer}  AND DATE_FORMAT(confirmdate, '%m')=date_format(date_add(now(), interval -1 MONTH), '%m')) as lastmonth,
		(select count(recono) from record WHERE tradecon = 'W' AND buyer=#{buyer}  AND DATE_FORMAT(confirmdate, '%m')=date_format(date_add(now(), interval -2 MONTH), '%m')) as lasttwomonth
    </select>



    <!-- ============================ 판매자 거래내역 ============================  -->
    
    <!-- 특정회원의 거래중 수를 위한 기능 정의 -->
    <select id="selectSellIngCount"
        parameterType="study.shop.cidermarket.model.Record"
        resultType="int">
        SELECT COUNT(*) 
        FROM record r
        INNER JOIN product p ON r.prodno=p.prodno
        WHERE r.tradecon='J' AND p.tradecon='W' AND p.seller=#{seller}
    </select>
    
    <!-- 특정회원의 거래완료 수를 위한 기능 정의 -->
    <select id="selectSellEndCount"
        parameterType="study.shop.cidermarket.model.Record"
        resultType="int">
        SELECT COUNT(*) 
        FROM record r
        INNER JOIN product p ON r.prodno=p.prodno
        WHERE NOT r.tradecon='J' AND NOT r.refund='J' AND p.seller=#{seller}
    </select>

    <!-- 판매자 거래중 단일행 조회를 위한 기능 정의 -->
    <select id="selectItem"
        parameterType="study.shop.cidermarket.model.Record"
        resultMap="recordMap">
        SELECT recono, r.how, p.prodno, p.subject, p.price, r.refund, r.tradecon, r.confirmdate, p.seller, r.buyer, 
            (SELECT nickname FROM member WHERE membno=buyer) AS nickname,
            (SELECT filepath FROM files WHERE fileno=(SELECT fileno FROM files WHERE refid=r.prodno AND reftable='product' order by fname asc limit 0, 1)) AS filepath
        FROM record r
        INNER JOIN product p ON r.prodno=p.prodno
        INNER JOIN member m ON r.buyer=m.membno
        WHERE NOT r.tradecon='J' AND NOT r.refund='J' AND recono=#{recono}
    </select>
    
    <!-- 구매자 거래중 단일행 조회를 위한 기능 정의 -->
    <select id="selectBuyItem"
        parameterType="study.shop.cidermarket.model.Record"
        resultMap="recordMap">
        SELECT recono, r.how, p.prodno, p.subject, p.price, r.refund, r.tradecon, r.confirmdate, p.seller, r.buyer, 
            (SELECT nickname FROM member WHERE membno=seller) AS nickname,
            (SELECT filepath FROM files WHERE fileno=(SELECT fileno FROM files WHERE refid=r.prodno AND reftable='product' order by fname asc limit 0, 1)) AS filepath
        FROM record r
        INNER JOIN product p ON r.prodno=p.prodno
        INNER JOIN member m ON r.buyer=m.membno
        WHERE NOT r.tradecon='J' AND NOT r.refund='J' AND recono=#{recono}
    </select>
    
    <!-- 판매자 거래중 다중행 조회를 위한 기능 정의 -->
    <select id="selectSellIngList"
        parameterType="study.shop.cidermarket.model.Record"
        resultMap="recordMap">
        SELECT recono, r.how, p.prodno, p.subject, p.price, r.refund, r.tradecon, p.seller, r.buyer,
            (SELECT nickname FROM member WHERE membno=buyer) AS nickname,  
            (SELECT filepath FROM files WHERE fileno=(SELECT fileno FROM files WHERE refid=r.prodno AND reftable='product' order by fname asc limit 0, 1)) AS filepath
        FROM record r
        INNER JOIN product p ON r.prodno=p.prodno
        WHERE r.tradecon='J' AND r.refund in('N', 'J', 'X') AND p.seller=#{seller}
        
        ORDER BY r.prodno DESC
        
        <if test="listCount > 0">
            LIMIT #{offset}, #{listCount}
        </if>
    </select>
    
    <!-- 판매자 거래완료 다중행 조회를 위한 기능 정의 -->
    <select id="selectSellEndList"
        parameterType="study.shop.cidermarket.model.Record"
        resultMap="recordMap">
        SELECT recono, r.how, p.prodno, p.subject, p.price, r.refund, r.tradecon, p.seller, r.buyer,
            (SELECT nickname FROM member WHERE membno=buyer) AS nickname,  
            r.confirmdate, r.name, r.tel, r.address, r.pay,
            (SELECT filepath FROM files WHERE fileno=(SELECT fileno FROM files WHERE refid=r.prodno AND reftable='product' order by fname asc limit 0, 1)) AS filepath,
            (SELECT revino FROM review WHERE prodno=r.prodno AND sender=#{seller}) AS revino
        FROM record r
        INNER JOIN product p ON r.prodno=p.prodno
        INNER JOIN member m ON r.buyer=m.membno
        WHERE NOT r.tradecon='J' AND NOT r.refund='J' AND p.seller=#{seller} 
        
        ORDER BY r.prodno DESC
        
        <if test="listCount > 0">
            LIMIT #{offset}, #{listCount}
        </if>
    </select>



    <!-- 직거래 거래확정 갱신을 위한 기능 정의 -->
    <update id="updateTradeconJWItem"
        parameterType="study.shop.cidermarket.model.Record">
        UPDATE record SET
            tradecon='W', how='J', confirmdate=now(), buyer=#{buyer}, name=#{nickname}
        WHERE prodno=#{prodno} AND tradecon='J'
    </update>
    
    <!-- 직거래 거래확정시 상품테이블 갱신을 위한 기능 정의 -->
    <update id="updateProductTradeconJWItem"
        parameterType="study.shop.cidermarket.model.Product">
        UPDATE product SET
            tradecon='W'
        WHERE prodno=#{prodno}
    </update>



    <!-- 택배거래 거래확정 갱신을 위한 기능 정의 -->
    <update id="updateTradeconTWItem"
        parameterType="study.shop.cidermarket.model.Record">
        UPDATE record SET
            tradecon='W', how='T', confirmdate=now(), buyer=#{buyer}
        WHERE recono=#{recono} AND tradecon='J' AND not refund='J'
    </update>
    
    <!-- 택배거래 취소 갱신을 위한 기능 정의 -->
    <update id="updateTradeconSItem"
        parameterType="study.shop.cidermarket.model.Record">
        UPDATE record SET
            tradecon='S', confirmdate=now()
        WHERE recono=#{recono} AND tradecon='J' AND not refund='J'
    </update>
        
    <!-- 택배거래 취소시 상품테이블 갱신을 위한 기능 정의 -->
    <update id="updateProductTradeconSItem"
        parameterType="study.shop.cidermarket.model.Product">
        UPDATE product SET
            tradecon='J'
        WHERE prodno=#{prodno}
    </update>
    
    <!-- 반품요청/승인 갱신을 위한 기능 정의 -->
    <update id="updateRefundItem"
        parameterType="study.shop.cidermarket.model.Record">
        UPDATE record SET
            refund=#{refund}, tradecon=#{tradecon}
        WHERE recono=#{recono}
    </update>
	
	
	
	
	
	<!-- ============================  구매자 거래내역  ============================  -->  
    
    <!-- 구매자 거래중 다중행 조회를 위한 기능 정의 -->
    <select id="selectBuyIngList"
        parameterType="study.shop.cidermarket.model.Record"
        resultMap="recordMap">
        SELECT recono, r.how, p.prodno, p.subject, p.price, r.refund, r.tradecon, p.seller, r.buyer,
            (SELECT nickname FROM member WHERE membno=buyer) AS nickname,  
            (SELECT filepath FROM files WHERE fileno=(SELECT fileno FROM files WHERE refid=r.prodno AND reftable='product' order by fname asc limit 0, 1)) AS filepath
        FROM record r
        INNER JOIN product p ON r.prodno=p.prodno
        WHERE r.tradecon='J' AND r.buyer=#{buyer}
        
        ORDER BY r.prodno DESC
        
        <if test="listCount > 0">
            LIMIT #{offset}, #{listCount}
        </if>
    </select>
    
    <!-- 구매자 거래완료 다중행 조회를 위한 기능 정의 -->
    <select id="selectBuyEndList"
        parameterType="study.shop.cidermarket.model.Record"
        resultMap="recordMap">
        SELECT recono, r.how, p.prodno, p.subject, p.price, r.refund, r.tradecon, p.seller, r.buyer,
            (SELECT nickname FROM member WHERE membno=buyer) AS nickname,  
            r.confirmdate, r.name, r.tel, r.address, r.pay,
            (SELECT filepath FROM files WHERE fileno=(SELECT fileno FROM files WHERE refid=r.prodno AND reftable='product' order by fname asc limit 0, 1)) AS filepath,
            (SELECT revino FROM review WHERE prodno=r.prodno AND sender=#{buyer}) AS revino
        FROM record r
        INNER JOIN product p ON r.prodno=p.prodno
        INNER JOIN member m ON r.buyer=m.membno
        WHERE NOT r.tradecon='J' AND NOT r.refund='J' AND r.buyer=#{buyer}
        
        ORDER BY r.prodno DESC
        
        <if test="listCount > 0">
            LIMIT #{offset}, #{listCount}
        </if>
    </select>
    
    <!-- 특정회원의 구매중 수를 위한 기능 정의 -->
    <select id="selectBuyIngCount"
        parameterType="study.shop.cidermarket.model.Record"
        resultType="int">
        SELECT COUNT(*) 
        FROM record r
        INNER JOIN product p ON r.prodno=p.prodno
        WHERE r.tradecon = 'J' AND r.buyer=#{buyer}
    </select>
    
    <!-- 특정회원의 구매완료 수를 위한 기능 정의 -->
    <select id="selectBuyEndCount"
        parameterType="study.shop.cidermarket.model.Record"
        resultType="int">
        SELECT COUNT(*) 
        FROM record r
        INNER JOIN product p ON r.prodno=p.prodno
        WHERE NOT r.tradecon='J' AND NOT r.refund='J' AND r.buyer=#{buyer}
    </select>
    
    <!-- 구매자 직거래 거래확정 갱신을 위한 기능 정의 -->
    <update id="updateBuyTradeconJWItem"
        parameterType="study.shop.cidermarket.model.Record">
        UPDATE record SET
            tradecon='W', confirmdate=now(), buyer=#{buyer}, name=#{nickname}
        WHERE recono=#{recono} AND tradecon='J'
    </update>
    
    <!-- 구매자 택배거래 거래확정 갱신을 위한 기능 정의 -->
    <update id="updateBuyTradeconTWItem"
        parameterType="study.shop.cidermarket.model.Record">
        UPDATE record SET
            tradecon='C', confirmdate=now()
        WHERE recono=#{recono} AND tradecon='J' AND not refund='J'
    </update>
    
    
    
    <!-- ============================  주문서 ============================ -->
    
    <!-- 주문서 페이지에서 주문 완료 버튼을 눌렀을때 데이터 기록되는 기능  -->
    <insert id="insertOrderItem"
        parameterType="study.shop.cidermarket.model.Record"
        useGeneratedKeys="true" keyProperty="recono">
        INSERT INTO record (
            prodno, buyer, tradecon, refund, how, confirmdate, name, tel, address, pay 
        ) VALUES (
            #{prodno}, #{buyer}, 'J', 'N', 'T', now(), #{name}, #{tel}, #{address}, #{pay} 
        )
    </insert>
    
    <!-- 주문 완료 페이지에 쓰일 단일행 조회를 위한 기능 정의 -->
    <select id="selectOrderItem"
        parameterType="study.shop.cidermarket.model.Record"
        resultMap="recordMap">
        SELECT * FROM record
        WHERE recono=#{recono}
    </select>
    
     <select id="selectUserInfo"
        parameterType="study.shop.cidermarket.model.Record"
        resultMap="recordMap">
        SELECT  distinct r.buyer, m.nickname
        FROM record r
        INNER JOIN member m ON r.buyer=m.membno
        WHERE m.membno=#{membno}
    </select>
    
    
        <!-- 구매자 거래중 다중행 조회를 위한 기능 정의 -->
    <select id="selectTotalList"
        parameterType="study.shop.cidermarket.model.Record"
        resultMap="recordMap">
        SELECT r.recono, p.price,p.prodno, m.nickname, DATE_FORMAT(r.confirmdate, '%Y-%m-%d') AS confirmdate, r.how, r.tradecon, r.refund
        FROM record r
        INNER JOIN product p ON r.prodno=p.prodno
        INNER JOIN member m ON r.buyer= m.membno
        
        ORDER BY r.confirmdate DESC
        
        <if test="listCount > 0">
            LIMIT #{offset}, #{listCount}
        </if>
    </select>
    
    	<select id="selectCountAll"
		parameterType="study.shop.cidermarket.model.Record" resultType="int">
		select count(*)
		from record
		
		
		<where>
			<if test="name !=null and name!= '' ">
				name like concat('%', #{name}, '%')
			</if>
		</where>
		
		</select>

<!-- 관리자 메인화면에 쓸 총 거래건수 조회를 위한 기능 정의 -->
    <select id="selectAdmRecordCount"
        parameterType="study.shop.cidermarket.model.Record"
        resultType="int"> 
        SELECT COUNT(*) 
        FROM record r
        WHERE tradecon='W' AND DATE_FORMAT(confirmdate, '%Y-%m-%d') = DATE_FORMAT(DATE_ADD(now(), INTERVAL -#{recono} DAY),'%Y-%m-%d')
    </select>    
    
    <!-- 특정 상품을 참조하는 데이터를 모두 참조 해제한다.  -->
    <update id="unsetProduct"
    	parameterType="study.shop.cidermarket.model.Record">
    	Update record set prodno=null where prodno=#{prodno}
    </update>
<!-- 관리자 메인화면에 쓸 지난 일주일 간 거래액 조회를 위한 기능 정의 -->
    <select id="selectAdmTotalPayCount"
        parameterType="study.shop.cidermarket.model.Record"
        resultType="string"> 
        SELECT SUM(p.price)+SUM(p.fee) FROM record r
        INNER JOIN product p ON r.prodno=p.prodno
        WHERE r.tradecon='W'AND DATE_FORMAT(r.confirmdate, '%Y-%m-%d') > DATE_FORMAT(DATE_ADD(now(), INTERVAL -6 DAY),'%Y-%m-%d')
    </select>    
    
     <!-- 멤버 탈퇴시 buyer를 대표더미데이터로 기능 정의 -->
    <update id="updateItemByMembno"
        parameterType="study.shop.cidermarket.model.Record">
        UPDATE record SET
            buyer=999
        WHERE buyer=#{buyer}
    </update>
    
    <!-- 데이터 삭제를 위한 기능 정의 -->
	<delete id="deleteProductItem"
		parameterType="study.shop.cidermarket.model.Record">
		DELETE FROM record WHERE prodno=#{prodno}
	</delete>

    <!-- 상품등록을 했을 때 레코드 테이블에 생성  -->
    <insert id="insertItemReg"
        parameterType="study.shop.cidermarket.model.Record"
        useGeneratedKeys="true" keyProperty="recono">
        INSERT INTO record (
            prodno, buyer, tradecon, refund, how 
        ) VALUES (
            #{prodno}, null, 'J', 'N', 'J' )
    </insert>
    
    <!-- 택배거래 확정되면 직거래로 등록되있던 record 필드 지움-->
    <delete id="deleteJItem"
        parameterType="study.shop.cidermarket.model.Record">
        delete FROM record WHERE prodno=#{prodno} AND how='J'
    </delete>
</mapper>