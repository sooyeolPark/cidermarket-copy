<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ReviewMapper">

	<!-- Beans의 멤버변수(property) 이름과 대상 테이블의 컬럼(column)을 연결한다. -->
	<resultMap type="study.shop.cidermarket.model.Review" id="ReviewMap">
		<result property="revino" column="revino" />
		<result property="prodno" column="prodno" />
		<result property="regdate" column="regdate" />
		<result property="rate" column="rate" />
		<result property="content" column="content" />
		<result property="recono" column="recono" />
		<result property="sender" column="sender" />
		<result property="receiver" column="receiver" />
		<result property="name" column="name" />
		<result property="nickname" column="nickname" />
		<result property="how" column="how" />
		<result property="subject" column="subject" />
		<result property="buyer" column="buyer" />
		<result property="filepath" column="filepath" />
		<result property="reviewpic" column="reviewpic" />
		<result property="price" column="price" />
		<result property="nickname" column="nickname" />
		<result property="outmember" column="outmember" />
		<result property="shopaddress" column="shopaddress" />
	</resultMap>
	
	
	<!-- 다중행 조회를 위한 기능 정의 -->
	<select id="selectList"
		parameterType="study.shop.cidermarket.model.Review"
		resultMap="ReviewMap">
		SELECT 
		revino, rv.prodno, DATE_FORMAT(rv.regdate, '%Y-%m-%d') AS regdate,
		rv.content, rv.recono, rv.sender, rv.receiver, rv.rate,  
		m.outmember, rc.how, p.subject, rc.buyer,
		(SELECT nickname FROM member WHERE membno=sender) AS nickname,
		(SELECT shopaddress FROM member WHERE membno=sender) AS shopaddress,  		
		(SELECT filepath FROM files WHERE fileno=(SELECT fileno FROM files WHERE refid=rv.sender AND reftable='member' order by fname asc limit 0, 1)) AS filepath
		FROM review rv
		INNER JOIN record rc On rv.recono = rc.recono
		INNER JOIN product p On rv.prodno = p.prodno
		INNER JOIN member m ON rc.buyer= m.membno
		WHERE receiver = #{receiver}
		ORDER BY rv.regdate DESC
		
		<if test="listCount > 0">
			LIMIT #{offset}, #{listCount}
		</if>
	</select>
	
		<select id="selectPicList"
		parameterType="study.shop.cidermarket.model.Review"
		resultMap="ReviewMap">
		SELECT 
		revino, rv.prodno, DATE_FORMAT(rv.regdate, '%Y-%m-%d') AS regdate,
		rv.content, rv.recono, rv.sender, rv.receiver, rv.rate,  
		m.outmember, rc.how, p.subject, rc.buyer,
		(SELECT nickname FROM member WHERE membno=sender) AS nickname,
		(SELECT shopaddress FROM member WHERE membno=sender) AS shopaddress,   		
		(SELECT filepath FROM files WHERE fileno=(SELECT fileno FROM files WHERE refid=rv.sender AND reftable='member' order by fname asc limit 0, 1)) AS filepath
		
		FROM review rv
		INNER JOIN record rc On rv.recono = rc.recono
		INNER JOIN product p On rv.prodno = p.prodno
		INNER JOIN member m ON rc.buyer= m.membno
		WHERE receiver = #{receiver}
		ORDER BY rv.regdate DESC
		
		<if test="listCount > 0">
			LIMIT #{offset}, #{listCount}
		</if>
	</select>
	
		
	
	<!-- 데이터 수 조회를 위한 기능 정의 -->
	<select id="selectCountAll"
		parameterType="study.shop.cidermarket.model.Review"
		resultType="int">
		SELECT COUNT(*) FROM review
		WHERE receiver = #{receiver}

	</select>
	
	
	<insert id="insertItem"
		parameterType="study.shop.cidermarket.model.Review"
		useGeneratedKeys="true" keyProperty="revino">
		INSERT INTO review (
		prodno, regdate, rate, content,recono,sender,receiver
		) VALUES (
		#{prodno},#{regdate},#{rate},#{content},#{recono},#{sender},#{receiver}
		)
	</insert>

	<!-- 단일행 조회를 위한 기능 정의 -->	
	<select id="selectItem"
		parameterType="study.shop.cidermarket.model.Review"
		resultMap="ReviewMap">
		
		SELECT 
		r.revino, r.receiver, p.subject, p.price, r.content, m.nickname, m.rate,
		(SELECT filepath FROM files WHERE fileno=(SELECT fileno FROM files WHERE refid=p.prodno AND reftable='product' order by fname asc limit 0, 1)) AS filepath
		FROM review r 
		INNER JOIN product p ON r.prodno=p.prodno
		INNER JOIN member m ON r.receiver = m.membno
		WHERE revino=#{revino}
		
	</select>

	<!-- 평균 별점 조회를 위한 기능 정의 -->
	<select id="getAvgRate"
		parameterType="study.shop.cidermarket.model.Review"
		resultType="float">
		SELECT avg(rate) FROM review
		WHERE receiver = #{receiver}

	</select>

		<!-- 센더가 회원 탈퇴 시 더미데이터로 수정을 위한 기능 정의 (실제로 삭제하지 않고 데이터 값을 바꾼다). -->	
	<update id="updateItemBySender"
		parameterType="study.shop.cidermarket.model.Review">
		UPDATE review SET
			sender= 999
		WHERE sender=#{sender}
	</update>	
	
		<!-- receiver가 탈퇴시 데이터 삭제를 위한 기능 정의 -->
	<delete id="deleteItemByReceiver"
		parameterType="study.shop.cidermarket.model.Review">
		DELETE FROM review WHERE receiver=#{receiver}
	</delete>
	
	
	

</mapper>